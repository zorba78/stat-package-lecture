[
["index.html", "통계 패키지 활용 2020년도 2학기 충남대학교 정보통계학과 강의 노트 Course Overview", " 통계 패키지 활용 2020년도 2학기 충남대학교 정보통계학과 강의 노트 한국한의학연구원, 구본초 2020-09-19 Course Overview R을 이용한 데이터 분석 시 CRAN에 등록된 패키지를 활용한다. 적절한 패키지의 활용은 데이터 분석의 효율을 증대할 뿐 아니라 분석의 재현성을 향상할 수 있다. 본 강의는 지난학기에 학습한 통계프로그래밍언어 강의 내용의 연속선 상에서 진행할 예정이며, 해당 강의에서 학습한 내용들을 기반으로 데이터 분석 및 그 결과에 대한 보고서 작성, 그리고 R 생성 파일에 대한 버전 관리 방법에 대해 알아보고자 한다. 교과 목표 R Markdown의 이해와 활용 R 프로그래밍 능력 향상 및 통계 시뮬레이션의 이해 R을 이용한 데이터 분석 실습 R을 이용한 기초 통계분석 텍스트 마이닝에 대한 이해 Shiny, plotly 를 활용한 동적 문서 및 시각화 이해 RStudio + Github을 이용한 버전관리 이해 선수과목 통계학 개론 통계 프로그래밍 언어 수업 방법 강의: 30 % 실험/실습: 70 % 평가방법 중간고사: 35 % 기말고사: 35 % 출석: 10 % 과제: 20 % 교재 별도의 교재 없이 본 강의 노트로 수업을 진행할 예정이며, 수업의 이해도 향상을 위해 아래 소개할 도서 및 웹 문서 등을 참고할 것을 권장함. 참고문헌 R Markdown Cookbook (Xie, Dervieux, and Riederer 2020) bookdown: Authoring Books and Technical Documents with R Markdown (Xie 2016) R과 knitr를 활용한 데이터 연동형 문서 만들기 (고석범 2014) R for data science (Wickham and Grolemund 2016) Statistical Computing with R (Rizzo 2019) R programming for data science (Peng 2016) Text mining with R (Silge and Robinson 2017) References "],
["r-markdown.html", "1 R Markdown", " 1 R Markdown Sketch 동일한 문서에 코드, 결과, 텍스트가 동시에 있을 수 있을까? 만약 결과와 도표가 자동으로 생성된 경우 데이터가 변경 되더라도 자동으로 문서를 업데이트 할 수 있을까? 최종 완료한 문서가 미래에도 열 수 있을까? 이러한 모든 과정이 매우 쉽다면?? Figure 1.1: R markdown 세계(https://ulyngs.github.io/rmarkdown-workshop-2019 에서 발췌) "],
["r-markdown의-구성.html", "1.1 R Markdown의 구성", " 1.1 R Markdown의 구성 본 절의 내용 중 일부는 지난 학기 강의노트 1.7절과 중복되거나 재구성한 내용이 포함됨. R Markdown은 R 코드와 분석 결과(표, 그림 등)을 포함한 문서 또는 컨텐츠를 제작하는 도구로 일반적으로 아래 열거한 형태로 활용함 문서 또는 논문(pdf, html, docx) 프리젠테이션(pdf, html, pptx) 웹 또는 블로그 재현가능(reproducible)한 분석 및 연구1 가능 신뢰성 있는 문서 작성 Copy &amp; paste를 하지 않고 효율적 작업 가능 R 마크다운 파일 = .Rmd 확장자를 가진 일반 텍스트 파일 --- title: &quot;Untitled.Rmd&quot; date: &quot;2020-09-11&quot; output: html_document --- ```{r setup, include=FALSE} knitr::opts_chunk$set(echo = TRUE) ``` ## R Markdown Markdown은 HTML, PDF 및 MS Word 문서를 작성하 기위한 간단한 형식 지정 구문입니다. R Markdown 사용에 대한 자세한 내용은 &lt;http://rmarkdown.rstudio.com&gt;을 참조하십시오. **Knit** 버튼을 클릭하면 두 가지를 모두 포함하는 문서가 생성됩니다. 문서에 포함 된 R 코드 청크의 출력 내용뿐 아니라 다음과 같이 R 코드 청크를 포함 할 수 있습니다. ```{r cars} summary(cars) ``` ## Including Plots You can also embed plots, for example: ```{r pressure, echo=FALSE} plot(pressure) ``` `echo = FALSE` 매개 변수가 코드 청크에 추가되었습니다. 플롯을 생성 한 R 코드의 인쇄를 방지합니다. 위 R Markdown 문서는 아래 그림과 같이 YAML, Markdown 텍스트, Code Chunk 세 부분으로 구성됨. Figure 1.2: R markdown structure YAML (YAML Ain’t Markup Language) R Markdown 문서의 metadata로 문서의 맨 처음에 항상 포함(header)되어야 함. R Markdown 문서의 최종 출력 형태(html, pdf, docx, pptx 등), 제목, 저자, 날짜 등의 정보 등을 포함 최종 문서 생성 과정 Rmd 파일을 knitr 을 통해 .md 파일로 변환 후 pandoc 이라는 문서 변환기를 통해 원하는 문서 포맷으로 출력 Figure 1.3: R Markdown의 최종 결과물 산출과정(http://applied-r.com/project-reporting-template/) 과학적 연구의 결과물을 오픈소스로 내놓고 누구라도 검증 가능↩︎ "],
["r-markdown-문서-시작하기.html", "1.2 R Markdown 문서 시작하기", " 1.2 R Markdown 문서 시작하기 R Markdown 문서 생성: [File] -&gt; [New File] -&gt; [R Markdown..]을 선택 RStudio를 처음 설치하고 위와 같이 진행할 경우 아래와 같은 패키지 설치 여부를 묻는 팝업 창이 나타남. 패키지 설치 여부에 [Yes]를 클릭하면 R Markdown 문서 생성을 위해 필요한 패키지들이 자동으로 설치 설치 완료 후 R Markdown으로 생성할 최종 문서 유형 선택 질의 창이 나타남. 아래 창에서 제목(Title)과 저자(Author) 이름 입력 후 [OK] 버튼 클릭(Document, html 문서 선택) 아래 그림과 같이 새로운 문서 창이 생성되고 test.Rmd 파일로 저장2 문서 상단에 Knit 아이콘을 클릭 후 Knit to HTML 클릭 또는 문서 아무 곳에 커서를 위치하고 단축키 [Ctrl] + [Shift] + [K] 입력 knitr + R Markdown + pandoc \\(\\rightarrow\\) html 파일 생성 결과 Figure 1.4: test.html 문서 화면(저장 폴더 내 test.html을 크롬 브라우저로 실행) [RStudio 프로젝트]에서 생성한 폴더 내에 파일 저장↩︎ "],
["r-markdown-기본-문법syntax.html", "1.3 R Markdown 기본 문법(syntax)", " 1.3 R Markdown 기본 문법(syntax) R Markdown의 기본 문법은 Rstudio 풀다운 메뉴 [Help] \\(\\rightarrow\\) [Markdown Quick Reference] 에서 확인 가능 1.3.1 텍스트 문법 강조(emphasis) 이텔릭체: *italic1*, _italic2_ \\(\\rightarrow\\) italic1, italic2 볼드(굵은)체: *bold1*, __bold2__ \\(\\rightarrow\\) bold1, bold2 Inline code `inline code` \\(\\rightarrow\\) inline code 아래/위 첨자(sub/superscript) subscript~2~ \\(\\rightarrow\\) subscript2 superscript^2^ \\(\\rightarrow\\) superscript2 삭제표시(strike through) ~~strikethrough~~ \\(\\rightarrow\\) strikethrough 생략표시(ellipsis) ... \\(\\rightarrow\\) … 긴/짧은 대쉬(en/emd-dash) 짧은 대쉬: -- \\(\\rightarrow\\) – 긴 대쉬: --- \\(\\rightarrow\\) — 특수문자 탈출 지정자 \\*, \\_, \\~, \\\\ \\(\\rightarrow\\) *, _, ~, \\ 하이퍼링크 -[text](link) \\(\\rightarrow\\) 통계프로그래밍언어 외부그림 삽입 ![image title](path/to/image): ![장난꾸러기](figures/son-02.jpg) 장난꾸러기 강제 줄바꿈(line breaks) 하나의 줄에서 공백(space) 두 개 이상 또는 백슬레시(\\) 입력 후 [Enter] End a line with two spaces to start a new paragraph End a line with two spaces to start a new paragraph End a line with two spaces to start\\ a new paragraph End a line with two spaces to start a new paragraph 각주(footnote) A footnote^[주석내용] \\(\\rightarrow\\) A footnote3 주석(comment) &lt;!-- this is a comment that won't be shown --&gt; \\(\\rightarrow\\) RStudio에서 단축키 [Ctrl] + [Shift] + [C]를 통해 전체 line 에 대해 주석처리 가능 1.3.2 Block-level elements 장/절(header) # Header 1 (chapter, 장) ## Header 2 (section, 절) ### Header 3 (subsection, 관) 목록(list) 비순서(unordered) 목록: -, *, + 중 어느 하나로 입력 가능 - one item * two item + sub-item 1 + sub-item 2 - subsub-item 1 - subsub-item 2 one item two item sub-item 1 sub-item 2 subsub-item 1 subsub-item 2 순서(ordered) 목록: 비순서 목록의 기호 대신 숫자로 리스트 생성 1. the first item - sub-item 1 2. the second item 3. the third item the first item sub-item 1 the second item the third item 같은 숫자로 적어도 순서대로 목록 생성 1. the first item - sub-item 1 1. the second item 1. the third item the first item sub-item 1 the second item the third item 인용구(blockquote): &gt;로 시작 &gt; &quot;There are three kinds of lies: lies, damn lies, and statistics&quot; &gt; &gt; --- Benjamin Disraeli “There are three kinds of lies: lies, damn lies, and statistics” — Benjamin Disraeli 1.3.3 수식표현(math expression) 줄 안에 수식 입력 시 $수식표현$ 으로 입력 수식 display style (보통 교과서에 정리 및 정의에 기술된 수식들) 적용 시 $$ ~ $$ 안에 수식 입력 수식 표현은 LaTeX 의 수식 표현을 동일하게 준용(https://www.latex4technics.com/, https://latex.codecogs.com/legacy/eqneditor/editor.php 에서 수식 입력 명령어 학습 가능) LaTeX 수식 입력 코드는 예시 \\[ P(X = x) = f(x; n, p) = {n \\choose x} p^x (1-p)^{n-x} \\] Inline equation: $P(X = x) = f(x; n, p) = {n \\choose x} p^x (1-p)^{n-x}$ \\(\\rightarrow\\) \\(P(X = x) = f(x; n, p) = {n \\choose x} p^x (1-p)^{n-x}\\) Math block: $$P(X = x) = f(x; n, p) = {n \\choose x} p^x (1-p)^{n-x}$$ \\[P(X = x) = f(x; n, p) = {n \\choose x} p^x (1-p)^{n-x}\\] $ $ 또는 $$ $$ 안에 LaTeX에서 제공하는 수식 함수 사용 가능 $$\\begin{array}{ccc} x_{11} &amp; x_{12} &amp; x_{13}\\\\ x_{21} &amp; x_{22} &amp; x_{23} \\end{array}$$ \\[\\begin{array}{ccc} x_{11} &amp; x_{12} &amp; x_{13}\\\\ x_{21} &amp; x_{22} &amp; x_{23} \\end{array}\\] $$\\Theta = \\begin{pmatrix}\\alpha &amp; \\beta\\\\ \\gamma &amp; \\delta \\end{pmatrix}$$ \\[\\Theta = \\begin{pmatrix}\\alpha &amp; \\beta\\\\ \\gamma &amp; \\delta \\end{pmatrix}\\] $$\\begin{align} g(X_{n}) &amp;= g(\\theta)+g&#39;({\\tilde{\\theta}})(X_{n}-\\theta) \\notag \\\\ \\sqrt{n}[g(X_{n})-g(\\theta)] &amp;= g&#39;\\left({\\tilde{\\theta}}\\right) \\sqrt{n}[X_{n}-\\theta ] \\end{align}$$ \\[\\begin{aligned} g(X_{n}) &amp;= g(\\theta)+g&#39;({\\tilde{\\theta}})(X_{n}-\\theta) \\notag \\\\ \\sqrt{n}[g(X_{n})-g(\\theta)] &amp;= g&#39;\\left({\\tilde{\\theta}}\\right) \\sqrt{n}[X_{n}-\\theta ] \\end{aligned}\\] 주석내용↩︎ "],
["r-code-chunks.html", "1.4 R Code Chunks", " 1.4 R Code Chunks 실제 R code가 실행되는 부분임 Code chunk 실행 시 다양한 옵션 존재(본 강의에서는 몇 개의 옵션만 다룰 것이며, 더 자세한 내용은 https://yihui.org/knitr/options/ 또는 R Markdown 레퍼런스 가이드 참조 Code chunk는 ```{r}로 시작되며 r은 code 언어 이름을 나타냄. Code chunk는 ``` 로 종료 R Markdown 문서 작성 시 단축키 [Ctrl] + [Alt] + [I]를 입력하면 Chunk 입력창이 자동 생성됨 Code chunk의 옵션 조정을 통해 코드의 출력여부, 코드 출력 시 코드의 출력 형태, 코드의 결과물 출력 조정 가능 Figure 1.5: Chunk anatomy (https://ulyngs.github.io/rmarkdown-workshop-2019 에서 발췌) 자주 활용하는 chunk 옵션 코드 실행 관련 청크 Table 1.1: 코드 실행 관련 청크 Chunk 옵션 Default 설명 eval TRUE R 실행(코드 실행 결과)에 대응하는 결과 출력 여부 include TRUE 출력 문서에 코드 청크의 내용을 포함할지 여부 ```{r ex01-1, eval=TRUE} summary(iris) hist(iris$Sepal.Length) ``` ```{r ex01-2, eval=FALSE} summary(iris) hist(iris$Sepal.Length) ``` #청크 옵션 eval=TRUE summary(iris) Sepal.Length Sepal.Width Petal.Length Petal.Width Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 Median :5.800 Median :3.000 Median :4.350 Median :1.300 Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 Species setosa :50 versicolor:50 virginica :50 hist(iris$Sepal.Length) #청크 옵션 eval=FALSE summary(iris) hist(iris$Sepal.Length) 소스 코드 출력(텍스트) 결과 관련 청크 Table 1.2: 소스 코드 출력 결과 관련 청크 Chunk 옵션 Default 설명 echo TRUE R 실행 결과에 대응하는 코드 출력 여부 results markup 출력 결과 포맷 지정을 위한 옵션으로 추가적으로 3 가지 옵션 선택 가능: ‘hide’, ‘asis’, ‘hold’, ‘markup’ error TRUE 코드 또는 스크립트에 구문오류 메세지 출력 여부 message TRUE 코드로부터 생성된 메세지 출력 여부 warning TRUE 경고 메세지 출력 여부 echo: 코드 청크에 작성한 R-script 출력 여부 결정 echo = FALSE 이면 소스 코드 출력 없이 그림 결과만 출력 ```{r ex01-2, echo=TRUE} require(ggthemes) # ggtheme 패키지 불러오기 require(ggpubr) # ggpubr 패키지 불러오기 iris %&gt;% ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) + geom_point(size = 5) + theme_pubclean() + theme(axis.line = element_line(size = 0.8), legend.title = element_text(face = &quot;bold&quot;, size = 15), legend.text = element_text(face = &quot;bold&quot;, size = 12)) ``` ```{r ex01-3, echo=FALSE} require(ggthemes) # ggtheme 패키지 불러오기 require(ggpubr) # ggpubr 패키지 불러오기 iris %&gt;% ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) + geom_point(size = 5) + theme_pubclean() + theme(axis.line = element_line(size = 0.8), legend.title = element_text(face = &quot;bold&quot;, size = 15), legend.text = element_text(face = &quot;bold&quot;, size = 12)) ``` # echo = TRUE require(ggthemes) # ggtheme 패키지 불러오기 require(ggpubr) # ggpubr 패키지 불러오기 iris %&gt;% ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) + geom_point(size = 5) + theme_pubclean() + theme(axis.line = element_line(size = 0.8), legend.title = element_text(face = &quot;bold&quot;, size = 15), legend.text = element_text(face = &quot;bold&quot;, size = 12)) results: 코드의 텍스트 출력 결과 포맷 지정 markup (default): 코드 청크 내 스크립트의 출력 형태에 따라 텍스트 출력 결과를 mark-up asis: 변환하지 않은 원래 R 출력 결과 그대로(as is) 출력 hide: R 스크립트로 생성된 텍스트 출력을 보여주지 않음(warning, message 출력 예외) hold: 코드 청크로 생성된 모든 소스 및 출력을 단일 블록으로 축소 # results = &#39;markup&#39;인 경우 아래 텍스트를 mark-up # (이 경우 아래 텍스트는 ``` ``` 블럭 처리)한 결과를 md 파일로 전송 cat(&quot;I&#39;m raw **Markdown** content.\\n&quot;) I&#39;m raw **Markdown** content. Figure 1.6: 청크 옵션 results = ’markup’인 경우 rmd vs. md 파일 비교 # results = &#39;asis&#39; 인 경우 텍스트를 그대로 md 파일에 입력 cat(&quot;I&#39;m raw **Markdown** content.\\n&quot;) I’m raw Markdown content. Figure 1.7: 청크 옵션 results = ’asis’인 경우 rmd vs. md 파일 비교 # results = &#39;hide&#39; cat(&quot;I&#39;m raw **Markdown** content.\\n&quot;) # 텍스트 결과를 출력하지 않음 # results = &#39;hold&#39;가 아닌 경우 한 라인 별 출력 결과 생성 x &lt;- rnorm(10) x [1] -1.83270296 1.21270195 1.39821971 -0.58417571 0.35920287 -0.86078495 [7] -0.43368350 -0.63938989 -0.08831431 -1.41644478 y &lt;- rnorm(10, 1, 2) y [1] 4.0644580 2.8290595 3.8551013 -1.3059997 1.0033984 4.2019714 [7] 0.3751241 3.9964810 -1.9058390 5.6962030 x + y [1] 2.23175504 4.04176148 5.25332097 -1.89017543 1.36260126 3.34118646 [7] -0.05855944 3.35709113 -1.99415328 4.27975822 # results = &#39;hold&#39;인 경우 코드 부분과 출력 부분이 따로 블록 처리 x &lt;- rnorm(10) x y &lt;- rnorm(10, 1, 2) y x + y [1] 0.44425993 0.07310356 -0.14712123 0.75357261 -0.38774845 0.89581464 [7] -0.08682681 0.09645134 -0.21283043 0.40097245 [1] 3.56370082 -0.29482520 2.52799523 1.69805848 5.74227451 0.09402478 [7] -0.54300873 -1.30318169 0.46926169 3.16053519 [1] 4.0079607 -0.2217216 2.3808740 2.4516311 5.3545261 0.9898394 [7] -0.6298355 -1.2067303 0.2564313 3.5615076 error: 코드 청크 내 스크립트에 오류에 대한 보존 여부(stop()) 기본적으로 Rmarkdown 컴파일 시 error에 대한 옵션이 FALSE이기 때문에 스크립트(코드)에 오류가 포함되면 컴파일이 정지됨. error = TRUE 이면 오류 메세지를 포함한 텍스트 결과를 출력 3x &lt;- 3 x &lt;- 25 # 위 행이 구문 오류를 포함하고 있기 때문에 # 오류 이후의 코드는 실행되지 않음 x Error: &lt;text&gt;:1:2: 예상하지 못한 기호(symbol)입니다. 1: 3x ^ message/warning: 텍스트 출력물 중 경고(warning, warning() 함수의 출력 결과) 메세지 출력 여부 결정 # message = TRUE 인 경우 함수 message 출력 testit &lt;- function() { message(&quot;testing package startup messages&quot;) packageStartupMessage(&quot;initializing ...&quot;, appendLF = FALSE) Sys.sleep(1) packageStartupMessage(&quot; done&quot;) } # help(message) 예시 중 발췌 testit() testing package startup messages initializing ... done # message=FALSE -&gt; 메세지 출력하지 않음 testit() # 경고 메세지 출력 x &lt;- c(1, 2, &quot;new&quot;, 4:10) x &lt;- as.numeric(x) Warning: 강제형변환에 의해 생성된 NA 입니다 코드 서식 관련 청크 옵션 Table 1.3: 코드 서식 관련 청크 Chunk 옵션 Default 설명 comment TRUE 소스 코드 실행 출력의 각 줄 앞에 붙는 표시문자 출력 여부: 기본 값은 ‘##’ 임 highlight TRUE 구문 강조 여부 prompt FALSE R 프롬프트 출력 여부 tidy FALSE R 소스 코드 출력 정리 여부 comment: 텍스트 출력물에 주석 표시(default)를 함으로써 소스 코드와 출력 결과를 동시 선택과 복사를 가능(##는 주석 표시이기 때문에 실행되지 않음) 주석 표시를 제거하고 싶다면 comment = NA 또는 comment = '' # 디폴트 comment 사용 summary(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## highlight: 구문 강조 표시 여부 highlight=FALSE 일 때 소스 코드 출력 결과 # highlight=FALSE iris %&gt;% ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) + geom_point(size = 5) + theme_pubclean() + theme(axis.line = element_line(size = 0.8), legend.title = element_text(face = &quot;bold&quot;, size = 15), legend.text = element_text(face = &quot;bold&quot;, size = 12)) prompt: R 콘솔 상 프롬프트 &gt;, + 출력 여부 &gt; # prompt = TRUE 인 경우 코드 출력 결과 &gt; require(ggthemes) # ggtheme 패키지 불러오기 &gt; require(ggpubr) # ggpubr 패키지 불러오기 &gt; iris %&gt;% + ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) + + geom_point(size = 5) + + theme_pubclean() + + theme(axis.line = element_line(size = 0.8), + legend.title = element_text(face = &quot;bold&quot;, size = 15), + legend.text = element_text(face = &quot;bold&quot;, size = 12)) tidy: 코드를 사용자가 지정(혹은 formatR::tidy_sorce() 함수에 초기값으로 지정된 코드 정리 값)한 줄 당 문자 길이 등을 반영해 코드를 정리 tidy=TRUE 인 경우 자동으로 줄 바꿈 &gt; # tidy = FALSE 인 경우 코드 출력 결과 &gt; require(ggthemes) # ggtheme 패키지 불러오기 &gt; require(ggpubr) # ggpubr 패키지 불러오기 &gt; iris %&gt;% ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) + geom_point(size = 5) + theme_pubclean() + theme(axis.line = element_line(size = 0.8), legend.title = element_text(face = &quot;bold&quot;, size = 15), legend.text = element_text(face = &quot;bold&quot;, size = 12)) &gt; # tidy = TRUE 인 경우 코드 출력 결과 &gt; require(ggthemes) # ggtheme 패키지 불러오기 &gt; require(ggpubr) # ggpubr 패키지 불러오기 &gt; iris %&gt;% ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) + geom_point(size = 5) + + theme_pubclean() + theme(axis.line = element_line(size = 0.8), legend.title = element_text(face = &quot;bold&quot;, + size = 15), legend.text = element_text(face = &quot;bold&quot;, size = 12)) 그림(plot) 출력 관련 청크 옵션 Table 1.4: Plot 출력 관련 청크 Chunk 옵션 Default 설명 fig.align default 최종 문서에 plot 정렬 방식 결정(center/left/right) fig.height/fig.width 7 그림 크기(단위: 인치) fig.cap NULL 그림 캡션(문자열 입력) dpi 72 dot per inche: 출력 그림 해상도 알아두면 좋은 청크 형태 Setup 청크 일반적으로 Rmarkdown 문서는 YAML 해더 뒤에 전역적 청크 옵션 지정과 R 패키지를 불러오는 것으로 시작 청크 옵션은 knitr::opts_chunk$set(청크 옵션 지정) 형태로 지정 가능 다음은 RStudio 에서 Rmd 문서 생성 시 맨 처음 나오는 코드 청크 예시임 ```{r ex01-2, include=FALSE} knitr::opts_chunk$set(echo = TRUE) ``` 일반적 활용 예시 ```{r option-init, include=FALSE} knitr::opts_chunk$set(root.dir = &#39;../..&#39;, # 프로젝트 폴더 지정 eval = TRUE, echo = FALSE, cache = FALSE, include = TRUE, tidy = TRUE, tidy.opts = list(blank=FALSE, width.cutoff=120), # 소스 출력길이 지정 message = FALSE, warning = FALSE, engine = &quot;R&quot;, # Chunks will always have R code, unless noted error = TRUE, fig.path=&quot;Figures/&quot;, # Set the figure options fig.align = &quot;center&quot;, fig.width = 7, fig.height = 7, fig.keep=&#39;all&#39;, fig.retina=2) ``` 이미지 불러오기 ```{r, fig.cap = &quot;Taj Mahal&quot;} knitr::include_graphics(&quot;figures/taj.JPG&quot;, dpi = NA) ``` Figure 1.8: Taj Mahal ```{r, fig.cap = &quot;Taj Mahal&quot;} cars %&gt;% ggplot(aes(x = speed, y = dist)) + geom_point(size = 5) + theme_tufte(base_size = 15) # ggtheme::theme_tufte() ``` R 생성 도표 포함 Figure 1.9: Scatterplot of the car dataset 테이블 삽입 가장 간단한 테이블은 knitr::kable() 함수를 통해 생성 가능 ```{r} knitr::kable(head(iris)) ``` Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa "],
["inline-code.html", "1.5 인라인(inline) R 코드", " 1.5 인라인(inline) R 코드 문서의 모든 숫자를 인라인 R 코드를 통해 재현가능하게 생성 가능 인라인 R 코드는 `r 과 ` 사이에 변수 계산 스크립트를 입력해 작성 가능 예를 들어 `r 10 + 4` 는 14 출력 활용 예시 head(mtcars, 5) N &lt;- nrow(mtcars) mtcars 데이터셋에 포함된 자동차는 `r N ` 개다. \\(\\rightarrow\\) mtcars 데이터셋에 포함된 자동차는 32 개다. "],
["yaml.html", "1.6 YAML", " 1.6 YAML "],
["rmarkdown-table.html", "1.7 테이블", " 1.7 테이블 kableExtra: HTML 또는 LaTeX 용 표 생성 및 flextable + officer "],
["rmarkdown-reference.html", "1.8 참고문헌", " 1.8 참고문헌 "],
["references.html", "References", " References "]
]
